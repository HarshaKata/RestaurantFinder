{"ast":null,"code":"// src/api/restaurantApi.js\nconst API_BASE_URL = 'http://localhost:8081';\nexport const restaurantApi = {\n  getAllRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurants`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      throw error;\n    }\n  },\n  searchRestaurants: async name => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/restaurants/${name}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to search restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      throw error;\n    }\n  },\n  getOwnerRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurant/owner`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch owner restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching owner restaurants:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","restaurantApi","getAllRestaurants","token","localStorage","getItem","response","fetch","headers","ok","Error","json","error","console","searchRestaurants","name","getOwnerRestaurants"],"sources":["/Users/harshakata/Downloads/restaurant-finder-frontend/src/api/restaurantApi.js"],"sourcesContent":["// src/api/restaurantApi.js\nconst API_BASE_URL = 'http://localhost:8081';\n\nexport const restaurantApi = {\n    getAllRestaurants: async () => {\n        const token = localStorage.getItem('token');\n        try {\n            const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurants`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch restaurants');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching restaurants:', error);\n            throw error;\n        }\n    },\n\n    searchRestaurants: async (name) => {\n        const token = localStorage.getItem('token');\n        try {\n            const response = await fetch(`${API_BASE_URL}/restaurants/restaurants/${name}`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to search restaurants');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error searching restaurants:', error);\n            throw error;\n        }\n    },\n\n    getOwnerRestaurants: async () => {\n        const token = localStorage.getItem('token');\n        try {\n            const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurant/owner`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch owner restaurants');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching owner restaurants:', error);\n            throw error;\n        }\n    }\n};"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,aAAa,GAAG;EACzBC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,6BAA6B,EAAE;QACvEQ,OAAO,EAAE;UACL,eAAe,EAAE,UAAUL,KAAK,EAAE;UAClC,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACf;EACJ,CAAC;EAEDE,iBAAiB,EAAE,MAAOC,IAAI,IAAK;IAC/B,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,4BAA4Be,IAAI,EAAE,EAAE;QAC5EP,OAAO,EAAE;UACL,eAAe,EAAE,UAAUL,KAAK,EAAE;UAClC,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACnD;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACf;EACJ,CAAC;EAEDI,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMb,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,kCAAkC,EAAE;QAC5EQ,OAAO,EAAE;UACL,eAAe,EAAE,UAAUL,KAAK,EAAE;UAClC,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACxD;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}