{"ast":null,"code":"// src/api/authApi.js\nconst API_BASE_URL = 'http://localhost:8081';\nexport const authApi = {\n  login: async credentials => {\n    try {\n      console.log('Sending login request with:', credentials); // Debug log\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Login error:', errorData); // Debug log\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await response.json();\n      console.log('Login response:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Login error:', error); // Debug log\n      throw error;\n    }\n  },\n  // ... rest of the code\n  signup: async userData => {\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error('Signup failed');\n    }\n    return response.json();\n  },\n  // In src/api/authApi.js, add this function:\n  registerAdmin: async userData => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create admin account');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error registering admin:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","authApi","login","credentials","console","log","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","error","Error","message","data","signup","userData","registerAdmin","token","localStorage","getItem"],"sources":["/Users/harshakata/Downloads/restaurant-finder-frontend/src/api/authApi.js"],"sourcesContent":["\n\n\n// src/api/authApi.js\nconst API_BASE_URL = 'http://localhost:8081';\n\nexport const authApi = {\n  login: async (credentials) => {\n    try {\n      console.log('Sending login request with:', credentials); // Debug log\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Login error:', errorData); // Debug log\n        throw new Error(errorData.message || 'Login failed');\n      }\n      \n      const data = await response.json();\n      console.log('Login response:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Login error:', error); // Debug log\n      throw error;\n    }\n  },\n  // ... rest of the code\n  signup: async (userData) => {\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) {\n      throw new Error('Signup failed');\n    }\n    return response.json();\n  },\n  // In src/api/authApi.js, add this function:\nregisterAdmin: async (userData) => {\n  const token = localStorage.getItem('token');\n  try {\n      const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n          method: 'POST',\n          headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(userData)\n      });\n\n      if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || 'Failed to create admin account');\n      }\n\n      return await response.json();\n  } catch (error) {\n      console.error('Error registering admin:', error);\n      throw error;\n  }\n}\n};\n\n"],"mappings":"AAGA;AACA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,WAAW,CAAC,CAAC,CAAC;MACzD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,aAAa,EAAE;QACzDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCX,OAAO,CAACY,KAAK,CAAC,cAAc,EAAEF,SAAS,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAIG,KAAK,CAACH,SAAS,CAACI,OAAO,IAAI,cAAc,CAAC;MACtD;MAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCX,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEc,IAAI,CAAC,CAAC,CAAC;MACtC,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC,CAAC,CAAC;MACtC,MAAMA,KAAK;IACb;EACF,CAAC;EACD;EACAI,MAAM,EAAE,MAAOC,QAAQ,IAAK;IAC1B,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,cAAc,EAAE;MAC1DQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,QAAQ;IAC/B,CAAC,CAAC;IACF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAII,KAAK,CAAC,eAAe,CAAC;IAClC;IACA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;EACxB,CAAC;EACD;EACFO,aAAa,EAAE,MAAOD,QAAQ,IAAK;IACjC,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACA,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,cAAc,EAAE;QACxDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,eAAe,EAAE,UAAUc,KAAK,EAAE;UAClC,cAAc,EAAE;QACpB,CAAC;QACDb,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,QAAQ;MACjC,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMG,KAAK,GAAG,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;QACnC,MAAM,IAAIE,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,gCAAgC,CAAC;MACtE;MAEA,OAAO,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACf;EACF;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}