{"ast":null,"code":"// src/api/restaurantApi.js\nconst API_BASE_URL = 'http://localhost:8081';\nexport const restaurantApi = {\n  getAllRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      console.log('Making request with token:', token); // Debug log\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurants`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        console.error('Response status:', response.status); // Debug log\n        throw new Error('Failed to fetch restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      throw error;\n    }\n  },\n  searchRestaurants: async name => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/restaurants/${name}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to search restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      throw error;\n    }\n  },\n  getOwnerRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurant/owner`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch owner restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching owner restaurants:', error);\n      throw error;\n    }\n  },\n  addRestaurant: async restaurantData => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/addRestaurant`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(restaurantData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add restaurant');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding restaurant:', error);\n      throw error;\n    }\n  },\n  // In src/api/restaurantApi.js\n  updateRestaurant: async restaurantData => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/updateRestaurant`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(restaurantData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update restaurant');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating restaurant:', error);\n      throw error;\n    }\n  },\n  // In src/api/restaurantApi.js\n  getDuplicateRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/getDuplicateRestaurants`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch duplicate restaurants');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching duplicate restaurants:', error);\n      throw error;\n    }\n  },\n  // In src/api/restaurantApi.js\n  // In restaurantApi.js\n  deleteRestaurant: async restaurantId => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/deleteRestaurant?restaurantId=${restaurantId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete restaurant');\n      }\n\n      // Don't try to parse as JSON since it's a text response\n      return await response.text();\n    } catch (error) {\n      console.error('Error deleting restaurant:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","restaurantApi","getAllRestaurants","token","localStorage","getItem","console","log","response","fetch","method","headers","ok","error","status","Error","json","searchRestaurants","name","getOwnerRestaurants","addRestaurant","restaurantData","body","JSON","stringify","updateRestaurant","getDuplicateRestaurants","deleteRestaurant","restaurantId","text"],"sources":["/Users/harshakata/Downloads/restaurant-finder-frontend/src/api/restaurantApi.js"],"sourcesContent":["// src/api/restaurantApi.js\nconst API_BASE_URL = 'http://localhost:8081';\n\nexport const restaurantApi = {\n  getAllRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      console.log('Making request with token:', token); // Debug log\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurants`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        console.error('Response status:', response.status); // Debug log\n        throw new Error('Failed to fetch restaurants');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      throw error;\n    }\n  },\n\n  searchRestaurants: async (name) => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/restaurants/${name}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to search restaurants');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      throw error;\n    }\n  },\n  getOwnerRestaurants: async () => {\n        const token = localStorage.getItem('token');\n        try {\n            const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurant/owner`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch owner restaurants');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching owner restaurants:', error);\n            throw error;\n        }\n    },\n    addRestaurant: async (restaurantData) => {\n        const token = localStorage.getItem('token');\n        try {\n            const response = await fetch(`${API_BASE_URL}/restaurants/addRestaurant`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(restaurantData)\n            });\n    \n            if (!response.ok) {\n                throw new Error('Failed to add restaurant');\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error adding restaurant:', error);\n            throw error;\n        }\n    },\n    // In src/api/restaurantApi.js\nupdateRestaurant: async (restaurantData) => {\n    const token = localStorage.getItem('token');\n    try {\n        const response = await fetch(`${API_BASE_URL}/restaurants/updateRestaurant`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(restaurantData)\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to update restaurant');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Error updating restaurant:', error);\n        throw error;\n    }\n},\n// In src/api/restaurantApi.js\ngetDuplicateRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n        const response = await fetch(`${API_BASE_URL}/restaurants/getDuplicateRestaurants`, {\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            }\n        });\n\n        if (!response.ok) throw new Error('Failed to fetch duplicate restaurants');\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching duplicate restaurants:', error);\n        throw error;\n    }\n},\n// In src/api/restaurantApi.js\n// In restaurantApi.js\ndeleteRestaurant: async (restaurantId) => {\n    const token = localStorage.getItem('token');\n    try {\n        const response = await fetch(`${API_BASE_URL}/restaurants/deleteRestaurant?restaurantId=${restaurantId}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to delete restaurant');\n        }\n\n        // Don't try to parse as JSON since it's a text response\n        return await response.text();\n    } catch (error) {\n        console.error('Error deleting restaurant:', error);\n        throw error;\n    }\n}\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}