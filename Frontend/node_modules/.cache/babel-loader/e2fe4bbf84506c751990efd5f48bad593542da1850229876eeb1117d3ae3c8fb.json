{"ast":null,"code":"// src/api/restaurantApi.js\nconst API_BASE_URL = 'http://localhost:8081';\nexport const restaurantApi = {\n  getAllRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurants`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      throw error;\n    }\n  },\n  searchRestaurants: async name => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/restaurants/${name}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to search restaurants');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","restaurantApi","getAllRestaurants","token","localStorage","getItem","response","fetch","headers","credentials","ok","Error","json","error","console","searchRestaurants","name"],"sources":["/Users/harshakata/Downloads/restaurant-finder-frontend/src/api/restaurantApi.js"],"sourcesContent":["// src/api/restaurantApi.js\nconst API_BASE_URL = 'http://localhost:8081';\n\nexport const restaurantApi = {\n  getAllRestaurants: async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/getRestaurants`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch restaurants');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      throw error;\n    }\n  },\n\n  searchRestaurants: async (name) => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await fetch(`${API_BASE_URL}/restaurants/restaurants/${name}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to search restaurants');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error searching restaurants:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,aAAa,GAAG;EAC3BC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,6BAA6B,EAAE;QACzEQ,OAAO,EAAE;UACP,eAAe,EAAE,UAAUL,KAAK,EAAE;UAClC,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDM,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,iBAAiB,EAAE,MAAOC,IAAI,IAAK;IACjC,MAAMb,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,4BAA4BgB,IAAI,EAAE,EAAE;QAC9ER,OAAO,EAAE;UACP,eAAe,EAAE,UAAUL,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}